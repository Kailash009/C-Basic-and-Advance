Non-Static vs Static Function:-
-----------------------------------------------------------
Non-Static:-
---------------------------
>> Non-static function doesn't use static keyword.
>> It can be called with the help of object reference.
>> It takes more memory.
-------------------------------------------------------------------------------------------
For Example:-
-----------------------------
using System;
namespace Batch3PMAsgar
{
    class Employee
    {
        int i = 0;
        public void testing() // Non-Static Function.
        {
            i++;
            Console.WriteLine(i); // 1 1 1
        }
    }
    class Demo
    {
        static void Main()
        {
            Employee emp1 = new Employee();
            emp1.testing(); // emp1=1000

            Employee emp2 = new Employee();
            emp2.testing(); // emp2=2000

            Employee emp3 = new Employee();
            emp3.testing(); // emp3=3000
        }
    }
}
---------------------------------------------------------------------------------------------------
Static Function:-
----------------------------
>> Static function use static keyword.
>> It can be called with the help of Class Name.
>> It takes less memory.
>> No need to create an object to call static method.
--------------------------------------------------------------------------------------------
Syntax:-
---------------------
ClassName.methodName();
---------------------------------------------------------------------
using System;
namespace Batch3PMAsgar
{
    class Employee
    {
        static int i = 0;
        public static void testing() // Static Method.
        {
            i++;
            Console.WriteLine(i); // 1 2 3 
        }
    }
    class Demo
    {
        static void Main()
        {
            Employee.testing();
            Employee.testing();
            Employee.testing();
        }
    }
}
-------------------------------------------------------------------------------------------------------------------
Array:- ?????
----------------------
>> with the help of array we can store multiple values into a single variable.
------------------------------------------------------------------------------------------------------------------------
>> It is a collection of similar type of data items and the value can stored in contiguous memory allocation.
>> Array indexing start from 0.
>> we can access any array element randomly.
---------------------------------------------------------------------------------------------------------
Types of array:-
---------------------------------------------
1. 1-D (one dimensional array)
2. 2-D (two dimensional array)
3. Jagged Array.
-------------------------------------------------------------------------------
1. 1-D (one dimensional array):-
	1-D Array Initialization:-
int[] a = new int[6] { 12, 45, 67, 89, 21, 345 };
int -> Data type
[] -> subscript
a -> array name
new -> keyword.
-------------------------------------------------
using System;
namespace Batch3PMAsgar
{
    class Demo
    {
        static void Main()
        {
            int[] a = new int[6] { 12, 45, 67, 89, 21, 345 };
            for(int i=0;i<6;i++)
            {
                Console.WriteLine(a[i]);
            }
        }
    }
}
-----------------------------------------------------------------------------------
using System;
namespace Batch3PMAsgar
{
    class Demo
    {
        static void Main()
        {
            int[] a = new int[] { 12, 45, 67, 89, 21, 345,102,344,234,122,2134 };
            for(int i=0;i<a.Length;i++)
            {
                Console.WriteLine(a[i]);
            }
        }
    }
}
-----------------------------------------------------------------------------------------------------------------
1-D Array Declaration:-
using System;
namespace Batch3PMAsgar
{
    class Demo
    {
        static void Main()
        {
            int[] a = new int[6];  // Array Declaration
            Console.WriteLine("Enter 6 elements");
            for (int i = 0; i < 6; i++)
            {
                a[i] =Convert.ToInt32(Console.ReadLine());
            }
            Console.WriteLine("Print these elements");
            for (int i=0;i<6;i++)
            {
                Console.WriteLine(a[i]);
            }
        }
    }
}
---------------------------------------------------------------------------------
using System;
namespace Batch3PMAsgar
{
    class Demo
    {
        static void Main()
        {
            Console.WriteLine("Enter the size of array=");
            int size = Convert.ToInt32(Console.ReadLine());
            int[] a = new int[size];  // Array Declaration
            Console.WriteLine("Enter Elements");
            for (int i = 0; i < size; i++)
            {
                a[i] =Convert.ToInt32(Console.ReadLine());
            }
            Console.WriteLine("Print these elements");
            for (int i=0;i<size;i++)
            {
                Console.WriteLine(a[i]);
            }
        }
    }
}
----------------------------------------------------------------------------------------------------------------------
1-D Assignment:-
---------------------------------
1. wap to input 1-D elements and find its sum and average.  -> do this question.
2. wap to input 1-D elements and find the even and odd no. and also count total even and odd in that collection.
3. wap to input 1-D elements and search particular element.
4. wap to input 1-D elements and print its reverse.
5. wap to input 1-D elements and find the greatest and smallest number among them.
45 3 5 23
sm =3
grt=45
-----------------------------------------------------------------------------------------------------------------
2-D:-
--------------------------------
1. 2-D initialization
-----------------------------------
int[,] a = new int[3, 4] { { 12, 45, 67, 56 }, { 14, 54, 65, 21 }, { 32, 532, 324, 123 } };
-----------------------------------------------------------------------------------------------------------------------------
using System;
namespace Batch3PMAsgar
{
    class Demo
    {
        static void Main()
        {
            int[,] a = new int[3, 4] { { 12, 45, 67, 56 }, { 14, 54, 65, 21 }, { 32, 532, 324, 123 } };
            for(int i=0;i<3;i++)
            {
                for(int j=0;j<4;j++)
                {
                    Console.Write(a[i,j]+"\t");
                }
                Console.WriteLine();
            }
            
            //Console.WriteLine(a[0,2]); // 67
            //Console.WriteLine(a[1,2]); // 65
            //Console.WriteLine(a[2,1]); // 532
        }
    }
}
---------------------------------------------------------------------------
2. 2-D Declartion:-
--------------------------------------
using System;
namespace Batch3PMAsgar
{
    class Demo
    {
        static void Main()
        {
            int[,] a = new int[4, 3];  // Declaration
            int i, j;
            Console.WriteLine("Enter 4X3 Elements");
            for(i=0;i<4;i++)
            {
                for(j=0;j<3;j++)
                {
                    a[i, j] = Convert.ToInt32(Console.ReadLine());
                }
            }
            Console.WriteLine("Print 4X3 Elements");
            for (i = 0; i < 4; i++)
            {
                for (j = 0; j < 3; j++)
                {
                    Console.Write(a[i,j]+"\t");
                }
                Console.WriteLine();
            }

        }
    }
}
-----------------------------------------------------------------------------------
or
------------
using System;
namespace Batch3PMAsgar
{
    class Demo
    {
        static void Main()
        {
            int row, col;
            Console.WriteLine("Enter Rows and Columns");
            row = Convert.ToInt32(Console.ReadLine());
            col = Convert.ToInt32(Console.ReadLine());
            int[,] a = new int[row, col];  // Declaration
            int i, j;
            Console.WriteLine("Enter Elements");
            for(i=0;i<row;i++)
            {
                for(j=0;j<col;j++)
                {
                    a[i, j] = Convert.ToInt32(Console.ReadLine());
                }
            }
            Console.WriteLine("Print Elements");
            for (i = 0; i < row; i++)
            {
                for (j = 0; j < col; j++)
                {
                    Console.Write(a[i,j]+"\t");
                }
                Console.WriteLine();
            }

        }
    }
}
-------------------------------------------------------------------------
Assignment of 2-D:-
---------------------------------------
1. wap to input 2-D elements and find its sum and average.
2. wap to input 2-D elements and find its transpose.
3. wap to input 2-D element and print diagonal element.
4. wap to input 2-D element and find even and odd no. and also count.
5. wap to input two 2-D elements and finds its sum and subtraction.
1 3    +    1   4     2    7
2 4        4   4       6    8
6. wap to input two 2-D elements and finds its Multiplication.
----------------------------------------------------------------------------------------------------------------------------
Jagged Array:- Pending
-----------------------------------------------





























































































