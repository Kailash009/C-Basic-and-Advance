Data Abstraction:-
------------------------------------
>> Show only essential things and hiding unnecessary information.
>> It refers to the act of representing essential features only without including the background details or explanation.
-----------------------------------------------------------------------------------------------------------------------------------------
How to achieve data abstraction in c#:-
---------------------------------------------------------------
>> To achieve data abstraction in c# we use the concept of 'abstract class'.
-------------------------------------------------------------------------------------------------------------------
Abstract Class:-
----------------------------------
>> In abstract class we use abstract keyword.
>> In abstract class we make abstract method(Without Implementation/Body) as well as non-abstract method(With Implementation).
>> In abstract class we make data member.
>> In abstract class we make constructor.
>> we can't create an object of abstract class.
>> It doesn't support Multiple Inheritance.
>> abstract method can't be private.
-----------------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using System.Text;

namespace Batch3PMAsgar
{
    abstract class Example  // Abstract class.
    {
        public abstract int addition(int a, int b);
        public abstract int multiplication(int i, int j);
        public void sum()
        {
            Console.WriteLine("Hello Sum");
        }
    }
    class ABC :Example
    {
        public override int addition(int a, int b)
        {
            return a + b;
        }
        public override int multiplication(int i, int j)
        {
            return i * j;
        }
    }
    class Demo
    {
        static void Main()  // Library Method  // Owner   
        {
            ABC obj = new ABC();
            int ad=obj.addition(10, 3);
            Console.WriteLine("Addition="+ad);
            int mt=obj.multiplication(4, 5);
            Console.WriteLine("Multiplication="+mt);
            obj.sum();
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------------
Inheritance:-
---------------------------
>> child class always inherit the properties of its parent class.
>> Re-usability. (It means we don't need to re-write same code again and again)
>> It is the process in which object of one class acquire the properties of object of another class.
>> To perform inheritance we use colon ( : ) symbol.
-------------------------------------------------------------------------------------------------------------------------------------------------
Types of Inheritance:-
---------------------------------------
1. Single.
2. Multiple.
3. MultiLevel.
4. Hierarchical.
5. Hybrid.
----------------------------------------
1. Single Level Inheritance.
>> There is only one parent class and one child class.
>> child class inherit the properties of its parent.
----------------------------------------------------------------------------------------------------------------
using System;
using System.Text;

namespace Batch3PMAsgar
{
    class ABC  // Parent/Super/Base
    {
        public void display()
        {
            Console.WriteLine("Hello Parent");
        }
    }
    class BCD:ABC  // Child/Sub/Derived
    {
        public void show()
        {
            Console.WriteLine("Hello Child");
        }
    }
    class Demo
    {
        static void Main()  // Library Method  // Owner   
        {
            BCD ob = new BCD();
            ob.display();
            ob.show();
        }
    }
}
-------------------------------------------------------------------
or
---------------
using System;
using System.Text;
using System.Threading.Tasks.Dataflow;

namespace Batch3PMAsgar
{
    class ABC  // Parent/Super/Base
    {
        public int c;  // Instance Variable
        public int addition(int a,int b)
        {
            c = a + b;
            return c; // 40
        }
    }
    class BCD:ABC // Child/Sub/Derived
    {
        public int Multiplication(int m)
        {
            int mt = m * c;  // 5*40
            return mt;  // 200
        }
    }
    class Demo
    {
        static void Main()  // Library Method  // Owner   
        {
            BCD ob = new BCD();
            int sm=ob.addition(10, 30);
            Console.WriteLine("Addition="+sm);  //40
            int mt=ob.Multiplication(5);
            Console.WriteLine("Multiplication=" + mt); //200
        }
    }
}
--------------------------------------------------------------------------------------------------------------
Multiple Inheritance -- Pending
----------------------------------------
Assignment -
--------------------------
1. Hierarchical.
2. Hybrid.
3. MultiLevel.
-----------------------------






































