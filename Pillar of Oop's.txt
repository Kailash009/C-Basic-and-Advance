PILLARS OF OOP'S:-
---------------------
1. Inheritance.
2. Data Abstraction.
3. Encapsulation.
4. Polymorphism.
-----------------------------------------
1. Inheritance:-
---------------------
>> An object of one class acquire the properties object of another class.
>> we can inherit the properties of existing class.
>> child class always inherits the properties of its parent class.
>> It provide the idea of Re-usablity(we don't need to re-write same code again and again)
--------------------------------------------------------------------
Types of Inheritance:-
------------------------------
1. Single Inheritance.
2. Mutiple Inheritance.
3. Multilevel Inheritance.
4. Hierarchical Inheritance.
5. Hybrid Inheritance.
-----------------------------------------
1. Single Inheritance.
>> There is only one parent class and one child class it is known as single level inheritance.
using System;
using System.Text;

namespace Batch10AM21Aug
{
    class Parent
    {
        public void show()
        {
            Console.WriteLine("Hello Parent..");
        }
    }
    class Child:Parent
    {
        public void display()
        {
            Console.WriteLine("Hello Child..");
        }
    }
    class Demo
    {
        static void Main() 
        {
            Child ch = new Child();
            ch.show();
            ch.display();
        }
    }
}
-------------------------------------------
or
-------------
using System;
using System.Text;

namespace Batch10AM21Aug
{
    class Parent
    {
       public int c;
       public int addition(int a ,int b)
       {
            c = a + b;
            return c; // 9
       }
    }
    class Child :Parent
    {
        int res;
        public int mult(int m)
        {
            res = c * m; // 5*9
            return res; //  45
        }
    }
    class Demo
    {
        static void Main() 
        {
            Child ch = new Child();
            int s= ch.addition(4,5);
            Console.WriteLine("Sum="+s); //9
            int mt= ch.mult(5); // 
            Console.WriteLine("Multiply="+mt); // 45
        }
    }
}
---------------------------------------------------------------
2. Multiple Inheritance:-
----------------------------------
>> Multiple base classes and one child class.
-------------------------------------------------
Note: C# doesn't support Multiple Inheritance, But if you want to achieve multiple inheritance then we use the concept of "Interface".
----------------------------------------------------------------
Interface:-
--------------------
>> interface keyword is used to create interface.
>> In interface we provide only method declaration.
>> In interface we can't create Data member.
>> In interface we can't create Constructor.
>> By Default Interface is Public.
>> we can achieve multiple Inheritance.
>> In interface whatever method you declare it must be implement with their child classes.
>> we can't create an object of interface.
--------------------------------------------------------------
using System;
using System.Text;

namespace Batch10AM21Aug
{
    interface Father
    {
        public int sum(int a, int b); // Senior Developer.
    }
    interface Mother
    {
        public int mult(int c, int d);
    }
    class Child : Father, Mother
    {
        public int sum(int a, int b)
        {
            return a + b;
        }
        public int mult(int c, int d)
        {
            return c * d;
        }
    }

    class Demo
    {
        static void Main() 
        {
            Child ch = new Child();
            int s= ch.sum(4,5);
            Console.WriteLine("Sum="+s); //9
            int mt= ch.mult(5,8); // 
            Console.WriteLine("Multiply="+mt); // 40
        }
    }
}
-----------------------------------------------------------------
Assignment Task:-
---------------------------
3. MultiLevel.
4. Hybrid.
5. Hierarchical.
-----------------------------
2. Data Abstraction:- [Hiding Complexity]
----------------------------
>> It refers to the act of representing essential features without including the background details or explanation.
>> Show only essential things and hiding unnecessary information.
---------------------------------------------------------------------------
In C# data abstraction can be achieved using abstract class.
--------------------------------------------------------------------
Abstract Class:-
-----------------------
>> In abstract class we use abstract keyword.
>> In abstract class we create only abstract method.
>> abstract method can't be private.
>> we can't create an object of abstract class.
>> we can create data member inside abstract class.
>> we can create constructor inside abstract class.
>> we can't achieve multiple inheritance through abstract class.
>> In abstract class all abstract method must be override with their child class.
-------------------------------------------------------------------------
using System;
using System.Text;

namespace Batch10AM21Aug
{
    abstract class ABC  // Data Abstraction
    {
         public abstract int addition(int a, int b);
         public abstract int multiplication(int c, int d);
        public void show()
        {
            Console.WriteLine("I am a Regular Method...");
        }
    }
    class BCD:ABC
    {
        public override int addition(int a, int b)
        {
            return a + b;
        }
        public override int multiplication(int c, int d)
        {
            return c * d;
        }
    }

    class Demo
    {
        static void Main() 
        {
            BCD db = new BCD();
            int a=db.addition(3, 4);
            Console.WriteLine("Sum="+a);
            int m=db.multiplication(4, 8);
            Console.WriteLine("Mult="+m);
            db.show();

        }
    }
}
-----------------------------------------------------------------









































































